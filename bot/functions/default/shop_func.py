from aiogram.types import Message
import time, random, re

from bin.cash_var import users_cash as uc
from bin.main_var import main_client
from bin.config import CW_BOT_ID

from bot.content import GOLD_TEXT


# /open_shop
async def open_shop(mes: Message):
    #journal_log(mes)
    if not uc.select(**{'id': mes.from_user.id, 'guild_tag': 'AT'}):
        await mes.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return

    load = await mes.answer('–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å, –ø–æ–¥–æ–∂–¥–∏./‚è≥')
    await load.edit_text('–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å, –ø–æ–¥–æ–∂–¥–∏../‚åõ')
    await load.edit_text('–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å, –ø–æ–¥–æ–∂–¥–∏.../‚è≥')

    await main_client.connect()
    async with main_client.conversation(CW_BOT_ID) as conv:
        time.sleep(float(str(random.uniform(1, 3))[0:4]))
        await conv.send_message('/myshop_open')
        answer = await conv.get_response()
    await main_client.disconnect()

    if "It's OPEN now." in answer.message:
        txt = '–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å, –ø–æ–¥–æ–∂–¥–∏.../‚è≥\n–£—Å–ø–µ—Ö! –ó–∞—Ö–æ–¥–∏!'
    else:
        txt = '–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–∫—Ä—ã—Ç—å, –ø–æ–¥–æ–∂–¥–∏.../‚è≥\n–ü—Ä–æ–≤–∞–ª! –ü–æ–¥–æ–∂–¥–∏ –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç...'
    await load.edit_text(txt)


# /gold
async def gold(mes: Message):
    #journal_log(mes)
    if not uc.select(**{'id': mes.from_user.id, 'guild_tag': 'AT'}):
        await mes.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return

    load = await mes.answer('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏./‚è≥')
    await load.edit_text('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏../‚åõ')
    await load.edit_text('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏.../‚è≥')

    await main_client.connect()
    conv_answer_list = {}
    async with main_client.conversation(CW_BOT_ID) as conv:
        for i, req in enumerate(['/ws_MYdnt', '/ws_MYdnt_stand']):
            time.sleep(float(str(random.uniform(1, 3))[0:4]))
            await conv.send_message(req)
            conv_answer_list[str(i)] = await conv.get_response()
    await main_client.disconnect()

    mana = re.search(r'\w*/\w+', conv_answer_list.get('0').message).group(0)
    cost = re.search(r'Steel mold, 15üíß (\d+)', conv_answer_list.get('1').message).group(1)
    rand_price = str(random.randint(1, 999))
    open = '–û—Ç–∫—Ä—ã—Ç–æ‚úÖ' if 'Studio is –æ—Ç–∫—Ä—ã—Ç–æ.' in conv_answer_list.get('0').message else '–ó–∞–∫—Ä—ã—Ç–æüö´'

    await load.edit_text(GOLD_TEXT.format(cost, rand_price, open, mana))


# /change_cost
async def change_cost(mes: Message):
    #journal_log(mes)
    if not uc.select(**{'id': mes.from_user.id, 'guild_tag': 'AT'}):
        await mes.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return

    load = await mes.answer('–ú–µ–Ω—è—é —Ü–µ–Ω—É, –ø–æ–¥–æ–∂–¥–∏./‚è≥')
    await load.edit_text('–ú–µ–Ω—è—é —Ü–µ–Ω—É, –ø–æ–¥–æ–∂–¥–∏../‚åõ')
    await load.edit_text('–ú–µ–Ω—è—é —Ü–µ–Ω—É, –ø–æ–¥–æ–∂–¥–∏.../‚è≥')

    cc = re.search(r'(\d+)', mes.text[4:]).group(1)

    if not 1 < int(cc) < 1000:
        await load.edit_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.')
        return

    await main_client.connect()
    async with main_client.conversation(CW_BOT_ID) as conv:
        time.sleep(float(str(random.uniform(1, 3))[0:4]))
        await conv.send_message('/s_695_add 27 ' + cc)
        cc_report = await conv.get_response()
    await main_client.disconnect()

    if 'Steel mold, 15üíß {}üí∞'.format(cc) in cc_report.message:
        txt = '–ú–µ–Ω—è—é —Ü–µ–Ω—É, –ø–æ–¥–æ–∂–¥–∏.../‚åõ\n–£—Å–ø–µ—Ö! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ {}üí∞!'.format(cc)
    else:
        txt = '–ú–µ–Ω—è—é —Ü–µ–Ω—É, –ø–æ–¥–æ–∂–¥–∏.../‚åõ\n–ü—Ä–æ–≤–∞–ª! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.'

    await load.edit_text(txt)